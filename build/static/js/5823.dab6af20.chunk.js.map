{"version":3,"file":"static/js/5823.dab6af20.chunk.js","mappings":"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","sources":["components/card/Card.js","components/commonTableModel/Contact.js","components/commonTableModel/Lead.js","components/countUpComponent/countUpComponent.js","components/pagination/Pagination.js","components/spinner/Spinner.js","schema/contactSchema.js","schema/propertySchema.js","schema/leadSchema.js","schema/userSchema.js","schema/loginSchema.js","schema/emailSchema.js","schema/document.js","schema/phoneCallSchema.js","schema/textMsgSchema.js","schema/taskSchema.js","schema/meetingSchema.js"],"sourcesContent":["import { Box, useStyleConfig } from \"@chakra-ui/react\";\r\nfunction Card(props) {\r\n  const { variant, children, ...rest } = props;\r\n  const styles = useStyleConfig(\"Card\", { variant });\r\n\r\n  return (\r\n    <Box __css={styles} height={'100%'} {...rest}>\r\n      {children}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import {\r\n  Box, Checkbox,\r\n  Flex, Table,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport { useMemo, useState } from \"react\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\nimport { GrFormNext, GrFormPrevious } from \"react-icons/gr\";\r\n\r\n// Custom components\r\nimport Card from \"components/card/Card\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\r\nimport Pagination from \"components/pagination/Pagination\";\r\n\r\nexport default function ContactTable(props) {\r\n  const { columnsData, tableData, title, type, selectedValues, setSelectedValues } = props;\r\n\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const data = useMemo(() => tableData, [tableData]);\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n  const [gopageValue, setGopageValue] = useState()\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n\r\n  const handleCheckboxChange = (event, value) => {\r\n    if (type === \"multi\") {\r\n      if (event.target.checked) {\r\n        setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n      } else {\r\n        setSelectedValues((prevSelectedValues) =>\r\n          prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n        );\r\n      }\r\n    } else {\r\n      if (event.target.checked) {\r\n        setSelectedValues(value);\r\n      } else {\r\n        setSelectedValues(null);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Card\r\n      direction='column'\r\n      w='100%'\r\n      px='0px'\r\n      style={{ border: '1px solid gray.200' }}\r\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}>\r\n      <Flex px='25px' justify='space-between' mb='20px' align='center'>\r\n        <Text\r\n          color={textColor}\r\n          fontSize='22px'\r\n          fontWeight='700'\r\n          lineHeight='100%'>\r\n          {title}  (<CountUpComponent targetNumber={data?.length} />)\r\n        </Text>\r\n      </Flex>\r\n      <Box overflowY={'auto'} className=\"table-container-property\" >\r\n        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>\r\n          <Thead >\r\n            {headerGroups?.map((headerGroup, index) => (\r\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                {headerGroup.headers.map((column, index) => (\r\n                  <Th\r\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                    pe='10px'\r\n                    key={index}\r\n                    borderColor={borderColor}>\r\n                    <Flex\r\n                      justify='space-between'\r\n                      align='center'\r\n                      fontSize={{ sm: \"10px\", lg: \"12px\" }}\r\n                      color='gray.400'>\r\n                      {column.render(\"Header\")}\r\n                    </Flex>\r\n                  </Th>\r\n                ))}\r\n              </Tr>\r\n            ))}\r\n          </Thead>\r\n          <Tbody  {...getTableBodyProps()}>\r\n            {data?.length === 0 && (\r\n              <Tr>\r\n                <Td colSpan={columns.length}>\r\n                  <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                    -- No Data Found --\r\n                  </Text>\r\n                </Td>\r\n              </Tr>\r\n            )}\r\n            {page?.map((row, index) => {\r\n              prepareRow(row);\r\n              return (\r\n                <Tr {...row?.getRowProps()} key={index}>\r\n                  {row?.cells?.map((cell, index) => {\r\n                    let data = \"\";\r\n                    if (cell?.column.Header === \"#\") {\r\n                      data = (\r\n                        <Flex align=\"center\">\r\n                          {type === \"multi\" ? <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" /> :\r\n                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues === cell?.value} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />}\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                            {cell?.row?.index + 1}\r\n                          </Text>\r\n                        </Flex>\r\n                      );\r\n                    } else if (cell?.column.Header === \"title\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"first Name\") {\r\n                      data = (\r\n                        <Link to={user?.role !== 'admin' ? `/contactView/${cell?.row?.original._id}` : `/admin/contactView/${cell?.row?.original._id}`}>\r\n                          <Text\r\n                            me=\"10px\"\r\n                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                            color='green.400'\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                          >\r\n                            {cell?.value}\r\n                          </Text>\r\n                        </Link>\r\n                      );\r\n                    } else if (cell?.column.Header === \"last Name\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"phone Number\") {\r\n                      data = (\r\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\r\n                          color={textColor}>\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Email Address\") {\r\n                      data = (\r\n                        <Text fontSize=\"sm\" fontWeight=\"700\"\r\n                          color={textColor}>\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"physical Address\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"mailing Address\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Contact Method\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    }\r\n                    return (\r\n                      <Td\r\n                        {...cell?.getCellProps()}\r\n                        key={index}\r\n                        fontSize={{ sm: \"14px\" }}\r\n                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                        borderColor='transparent'>\r\n                        {data}\r\n                      </Td>\r\n                    );\r\n                  })}\r\n                </Tr>\r\n              );\r\n            })}\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n    </Card>\r\n  );\r\n}\r\n","import {\r\n  Box, Checkbox,\r\n  Flex, Table,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport { useMemo } from \"react\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\n\r\n// Custom components\r\nimport Card from \"components/card/Card\";\r\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Pagination from \"components/pagination/Pagination\";\r\n\r\nexport default function LeadTable(props) {\r\n  const { columnsData, tableData, title, type, selectedValues, setSelectedValues } = props;\r\n\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const data = useMemo(() => tableData, [tableData]);\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n  const [gopageValue, setGopageValue] = useState()\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n\r\n  const handleCheckboxChange = (event, value) => {\r\n    if (type === \"multi\") {\r\n      if (event.target.checked) {\r\n        setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n      } else {\r\n        setSelectedValues((prevSelectedValues) =>\r\n          prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n        );\r\n      }\r\n    } else {\r\n      if (event.target.checked) {\r\n        setSelectedValues(value);\r\n      } else {\r\n        setSelectedValues(null);\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n\r\n  return (\r\n    <Card\r\n      direction='column'\r\n      w='100%'\r\n      px='0px'\r\n      style={{ border: '1px solid gray.200' }}\r\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}>\r\n      <Flex px='25px' justify='space-between' mb='20px' align='center'>\r\n        <Text\r\n          color={textColor}\r\n          fontSize='22px'\r\n          fontWeight='700'\r\n          lineHeight='100%'>\r\n          {title}  (<CountUpComponent targetNumber={data?.length} />)\r\n        </Text>\r\n      </Flex>\r\n      <Box overflowY={'auto'} className=\"table-container-property\" >\r\n        <Table  {...getTableProps()} variant='simple' color='gray.500' mb='24px'>\r\n          <Thead >\r\n            {headerGroups?.map((headerGroup, index) => (\r\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                {headerGroup.headers.map((column, index) => (\r\n                  <Th\r\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                    pe='10px'\r\n                    key={index}\r\n                    borderColor={borderColor}>\r\n                    <Flex\r\n                      justify='space-between'\r\n                      align='center'\r\n                      fontSize={{ sm: \"10px\", lg: \"12px\" }}\r\n                      color='gray.400'>\r\n                      {column.render(\"Header\")}\r\n                    </Flex>\r\n                  </Th>\r\n                ))}\r\n              </Tr>\r\n            ))}\r\n          </Thead>\r\n          <Tbody  {...getTableBodyProps()}>\r\n            {data?.length === 0 && (\r\n              <Tr>\r\n                <Td colSpan={columns.length}>\r\n                  <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                    -- No Data Found --\r\n                  </Text>\r\n                </Td>\r\n              </Tr>\r\n            )}\r\n            {page?.map((row, index) => {\r\n              prepareRow(row);\r\n              return (\r\n                <Tr {...row?.getRowProps()} key={index}>\r\n                  {row?.cells?.map((cell, index) => {\r\n                    let data = \"\";\r\n                    if (cell?.column.Header === \"#\") {\r\n                      data = (\r\n                        <Flex align=\"center\">\r\n                          {type === \"multi\" ? <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" /> :\r\n                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues === cell?.value} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />}\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                            {cell?.row?.index + 1}\r\n                          </Text>\r\n                        </Flex>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead Name\") {\r\n                      data = (\r\n                        <Link to={user?.role !== 'admin' ? `/leadView/${cell?.row?.values._id}` : `/admin/leadView/${cell?.row?.values._id}`}>\r\n                          <Text\r\n                            me=\"10px\"\r\n                            sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                            color='green.400'\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                          >\r\n                            {cell?.value}\r\n                          </Text>\r\n                        </Link>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead Email\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead PhoneNumber\") {\r\n                      data = (\r\n                        <Text\r\n                          me=\"10px\"\r\n                          color={textColor}\r\n                          fontSize=\"sm\"\r\n                          fontWeight=\"700\"\r\n                        >\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead Address\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead Status\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead Owner\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    } else if (cell?.column.Header === \"Lead Score\") {\r\n                      data = (\r\n                        <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                          {cell?.value}\r\n                        </Text>\r\n                      );\r\n                    }\r\n                    return (\r\n                      <Td\r\n                        {...cell?.getCellProps()}\r\n                        key={index}\r\n                        fontSize={{ sm: \"14px\" }}\r\n                        minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                        borderColor='transparent'>\r\n                        {data}\r\n                      </Td>\r\n                    );\r\n                  })}\r\n                </Tr>\r\n              );\r\n            })}\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n    </Card>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nfunction CountUpComponent({ targetNumber }) {\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (count < targetNumber) {\r\n                setCount(prevCount => prevCount + 1);\r\n            }\r\n        }, targetNumber > 500 ? 0 : 20); // Change the interval duration as needed (in milliseconds)\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [count, targetNumber]);\r\n\r\n    return <span>{typeof targetNumber === \"number\" ? count : targetNumber}</span>\r\n}\r\n\r\nexport default CountUpComponent;\r\n","import { ArrowLeftIcon, ArrowRightIcon, ChevronLeftIcon, ChevronRightIcon } from '@chakra-ui/icons';\r\nimport { Flex, IconButton, NumberDecrementStepper, NumberIncrementStepper, NumberInput, NumberInputField, NumberInputStepper, Select, Text, Tooltip } from '@chakra-ui/react';\r\nimport React from 'react'\r\nimport { useEffect } from 'react';\r\n\r\nconst Pagination = (props) => {\r\n    const { gotoPage, gopageValue, setGopageValue, pageCount, canPreviousPage, previousPage, canNextPage, pageOptions, setPageSize, nextPage, pageSize, pageIndex } = props\r\n\r\n    useEffect(() => {\r\n        setGopageValue(1)\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <Flex justifyContent=\"space-between\" mt={2} alignItems=\"center\">\r\n            {pageOptions?.length !== 1 && <Flex>\r\n                <Tooltip label=\"First Page\">\r\n                    <IconButton\r\n                        onClick={() => { gotoPage(0); setGopageValue(1) }}\r\n                        isDisabled={!canPreviousPage}\r\n                        icon={<ArrowLeftIcon h={3} w={3} />}\r\n                        mr={4}\r\n                    />\r\n                </Tooltip>\r\n                <Tooltip label=\"Previous Page\">\r\n                    <IconButton\r\n                        onClick={() => { previousPage(); setGopageValue((pre) => pre - 1) }}\r\n                        isDisabled={!canPreviousPage}\r\n                        icon={<ChevronLeftIcon h={6} w={6} />}\r\n                    />\r\n                </Tooltip>\r\n            </Flex>}\r\n\r\n            <Flex alignItems=\"center\">\r\n                {pageOptions?.length !== 1 && <>\r\n                    <Text flexShrink=\"0\" mr={8}>\r\n                        Page{\" \"}\r\n                        <Text fontWeight=\"bold\" as=\"span\">\r\n                            {pageIndex + 1}\r\n                        </Text>{\" \"}\r\n                        of{\" \"}\r\n                        <Text fontWeight=\"bold\" as=\"span\">\r\n                            {pageOptions?.length}\r\n                        </Text>\r\n                    </Text>\r\n                    <Text flexShrink=\"0\">Go to page:</Text>{\" \"}\r\n                    <NumberInput\r\n                        ml={2}\r\n                        mr={8}\r\n                        w={28}\r\n                        min={1}\r\n                        max={pageOptions?.length}\r\n                        value={gopageValue}\r\n                        onChange={(value) => {\r\n                            const page = value ? value - 1 : 0;\r\n                            gotoPage(page);\r\n                            setGopageValue(value)\r\n                        }}\r\n                        defaultValue={pageIndex + 1}\r\n                    >\r\n                        <NumberInputField />\r\n                        <NumberInputStepper>\r\n                            <NumberIncrementStepper />\r\n                            <NumberDecrementStepper />\r\n                        </NumberInputStepper>\r\n                    </NumberInput>\r\n                </>}\r\n                <Select\r\n                    w={32}\r\n                    value={pageSize}\r\n                    onChange={(e) => {\r\n                        setPageSize(Number(e.target.value));\r\n                    }}\r\n                >\r\n                    {[5, 10, 20, 30, 40, 50].map((pageSize) => (\r\n                        <option key={pageSize} value={pageSize}>\r\n                            Show {pageSize}\r\n                        </option>\r\n                    ))}\r\n                </Select>\r\n            </Flex>\r\n\r\n            {pageOptions?.length !== 1 &&\r\n                <Flex>\r\n                    <Tooltip label=\"Next Page\">\r\n                        <IconButton\r\n                            onClick={() => { nextPage(); setGopageValue((pre) => pre + 1) }}\r\n                            isDisabled={!canNextPage}\r\n                            icon={<ChevronRightIcon h={6} w={6} />}\r\n                        />\r\n                    </Tooltip>\r\n                    <Tooltip label=\"Last Page\">\r\n                        <IconButton\r\n                            onClick={() => { gotoPage(pageCount - 1); setGopageValue(pageCount) }}\r\n                            isDisabled={!canNextPage}\r\n                            icon={<ArrowRightIcon h={3} w={3} />}\r\n                            ml={4}\r\n                        />\r\n                    </Tooltip>\r\n                </Flex>}\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default Pagination\r\n","import './style.css';\r\nconst Spinner = () => <div className=\"loader\"></div>;\r\n\r\nexport default Spinner;","import * as yup from 'yup'\r\n\r\nexport const contactSchema = yup.object({\r\n    // 1. Basic Information\r\n    firstName: yup.string().min(2).required('First Name is required'),\r\n    lastName: yup.string().min(2).required('Last Name is required'),\r\n    title: yup.string().required('Title is required'),\r\n    email: yup.string().email().required('Email is required'),\r\n    phoneNumber: yup.number().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required('Phonenumber is Required'),\r\n    mobileNumber: yup.number().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').notRequired(),\r\n    physicalAddress: yup.string().required('Physical address is required'),\r\n    mailingAddress: yup.string(),\r\n    preferredContactMethod: yup.string().required('Preferred contact method is required'),\r\n    // 2.Lead Source Information\r\n    leadSource: yup.string(),\r\n    referralSource: yup.string(),\r\n    campaignSource: yup.string(),\r\n    // 3. Status and Classifications\r\n    leadStatus: yup.string(),\r\n    leadRating: yup.number(),\r\n    leadConversionProbability: yup.string(),\r\n    // 5. History:\r\n    emailHistory: yup.string(),\r\n    phoneCallHistory: yup.string(),\r\n    meetingHistory: yup.string(),\r\n    notesandComments: yup.string(),\r\n    // 6. Tags or Categories\r\n    tagsOrLabelsForcategorizingcontacts: yup.string(),\r\n    // 7. Important Dates:\r\n    birthday: yup.date(),\r\n    anniversary: yup.date(),\r\n    keyMilestones: yup.string(),\r\n    // 8. Additional Personal Information\r\n    dob: yup.string(),\r\n    gender: yup.string(),\r\n    occupation: yup.string(),\r\n    interestsOrHobbies: yup.string(),\r\n    // 9. Preferred  Communication Preferences:\r\n    communicationFrequency: yup.string(),\r\n    preferences: yup.string(),\r\n    // 10. Social Media Profiles:\r\n    linkedInProfile: yup.string(),\r\n    facebookProfile: yup.string(),\r\n    twitterHandle: yup.string(),\r\n    otherProfiles: yup.string(),\r\n    // 11. Lead Assignment and Team Collaboration:\r\n    agentOrTeamMember: yup.string(),\r\n    internalNotesOrComments: yup.string(),\r\n    createBy: yup.string(),\r\n    // 12. Custom Fields:\r\n})","import * as yup from 'yup'\r\nconst currentYear = new Date().getFullYear()\r\n\r\nexport const propertySchema = yup.object({\r\n    // 1. basicPropertyInformation:\r\n    propertyType: yup.string().required(\"Property Type Is required\"),\r\n    propertyAddress: yup.string().required(\"Property Address Is required\"),\r\n    listingPrice: yup.string().required(\"Listing Price Is required\"),\r\n    squareFootage: yup.string().required(\"Square Footage Is required\"),\r\n    numberofBedrooms: yup.number().required(\"Number Of Bedrooms Is required\"),\r\n    numberofBathrooms: yup.number().required(\"Number Of Bathrooms Is required\"),\r\n    yearBuilt: yup.number().min(1000).max(currentYear).required(\"Year Built Is required\"),\r\n    propertyDescription: yup.string().required(\"Property Description Is required\"),\r\n    //2. Property Features and Amenities:\r\n    lotSize: yup.string(),\r\n    parkingAvailability: yup.string(),\r\n    appliancesIncluded: yup.string(),\r\n    heatingAndCoolingSystems: yup.string(),\r\n    flooringType: yup.string(),\r\n    exteriorFeatures: yup.string(),\r\n    communityAmenities: yup.string(),\r\n    //3. Media and Visuals:\r\n    propertyPhotos: yup.string(),\r\n    virtualToursOrVideos: yup.string(),\r\n    floorPlans: yup.string(),\r\n    propertyDocuments: yup.string(),\r\n    //4. Listing and Marketing Details:\r\n    listingStatus: yup.string(),\r\n    listingAgentOrTeam: yup.string(),\r\n    listingDate: yup.string(),\r\n    marketingDescription: yup.string(),\r\n    multipleListingService: yup.string(),\r\n    //5. Property History:\r\n    previousOwners: yup.number().min(0),\r\n    purchaseHistory: yup.string(),\r\n    //6. Financial Information:\r\n    propertyTaxes: yup.string(),\r\n    homeownersAssociation: yup.string(),\r\n    mortgageInformation: yup.string(),\r\n    //7. Contacts Associated with Property:\r\n    sellers: yup.string(),\r\n    buyers: yup.string(),\r\n    propertyManagers: yup.string(),\r\n    contractorsOrServiceProviders: yup.string(),\r\n    //8. Property Notes and Comments:\r\n    internalNotesOrComments: yup.string(),\r\n    //9. Custom Fields\r\n})","import * as yup from 'yup'\r\n\r\n\r\nexport const leadSchema = yup.object({\r\n    // Lead Information:\r\n    leadName: yup.string().required(\"Lead Name Is required\"),\r\n    leadEmail: yup.string().email().required(\"Lead Email Is required\"),\r\n    leadPhoneNumber: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required(\"Lead Phone Number Is required\"),\r\n    leadAddress: yup.string().required(\"Lead Address Is required\"),\r\n    // Lead Source and Details:\r\n    leadSource: yup.string(),\r\n    leadStatus: yup.string(),\r\n    leadSourceDetails: yup.string(),\r\n    leadCampaign: yup.string(),\r\n    leadSourceChannel: yup.string(),\r\n    leadSourceMedium: yup.string(),\r\n    leadSourceCampaign: yup.string(),\r\n    leadSourceReferral: yup.string(),\r\n    // Lead Assignment and Ownership:\r\n    leadAssignedAgent: yup.string(),\r\n    leadOwner: yup.string(),\r\n    leadCommunicationPreferences: yup.string(),\r\n    // Lead Dates and Follow-up:\r\n    leadCreationDate: yup.date().required(\"Lead Creation Date Is required\"),\r\n    leadConversionDate: yup.date().required(\"Lead Conversion Date Is required\"),\r\n    leadFollowUpDate: yup.date().required(\"lead Follow Up Date  Is required\"),\r\n    leadFollowUpStatus: yup.string(),\r\n    // Lead Scoring and Nurturing:\r\n    leadScore: yup.number().required(\"Lead Score Is required\"),\r\n    leadNurturingWorkflow: yup.string(),\r\n    leadEngagementLevel: yup.string(),\r\n    leadConversionRate: yup.number().required(\"lead Conversion Rate Is required\"),\r\n    leadNurturingStage: yup.string(),\r\n    leadNextAction: yup.string(),\r\n})\r\n","import * as yup from 'yup'\r\n\r\nexport const userSchema = yup.object({\r\n    firstName: yup.string().required(\"First Name Is required\"),\r\n    lastName: yup.string(),\r\n    phoneNumber: yup.string().required(\"Phone Number Is required\").matches(/^\\d{10}$/, \"Phone Number must be exactly 10 digits\"),\r\n    username: yup.string().email().required(\"Email Is required\"),\r\n})","import * as yup from 'yup'\r\n\r\nexport const loginSchema = yup.object({\r\n    username: yup.string().email().required(\"Email Is required\"),\r\n    password: yup.string().required(\"Password Is required\")\r\n})","import * as yup from 'yup'\r\n\r\nexport const emailSchema = yup.object({\r\n    sender: yup.string().required(\"Sender Is required\"),\r\n    recipient: yup.string().email().required(\"Recipient Is required\"),\r\n    cc: yup.string().email(),\r\n    bcc: yup.string().email(),\r\n    relatedToContact: yup.string(),\r\n    relatedToLead: yup.string(),\r\n    subject: yup.string(),\r\n    message: yup.string(),\r\n    createBy: yup.string(),\r\n    createByLead: yup.string(),\r\n}).test('createBy-or-createByLead-required', 'Recipient Is required', function (value) {\r\n    if (!value.createBy && !value.createByLead) {\r\n        return this.createError({\r\n            path: 'createBy',\r\n            message: 'Recipient Is required',\r\n        });\r\n    }\r\n});\r\n","import * as yup from 'yup'\r\n\r\n\r\n// Define the yup schema for the main document\r\nexport const documentSchema = yup.object().shape({\r\n    folderName: yup.string().required('Folder Name is required'),\r\n    filename: yup.string().min(2, 'File Name Must Be At Least 2 Characters'),\r\n    createBy: yup.string().required()\r\n});\r\n\r\n","import * as yup from 'yup'\r\n\r\nexport const phoneCallSchema = yup.object({\r\n    sender: yup.string().required(\"Sender Is required\"),\r\n    // recipient: yup.number().min(99999999, 'Phone number is invalid length').max(999999999999, 'Phone number is invalid').required(\"Recipient Is required\"),\r\n    recipient: yup.number().required(\"Recipient Is required\"),\r\n    callDuration: yup.string(),\r\n    callNotes: yup.string(),\r\n    createBy: yup.string(),\r\n    createByLead: yup.string(),\r\n    category: yup.string()\r\n}).test('createBy-or-createByLead-required', 'Recipient Is required', function (value) {\r\n    if (!value.createBy && !value.createByLead) {\r\n        return this.createError({\r\n            path: 'createBy',\r\n            message: 'Recipient Is required',\r\n        });\r\n    }\r\n});\r\n","import * as yup from 'yup'\r\n\r\nexport const textMsgSchema = yup.object({\r\n    sender: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required(\"Sender Is required\"),\r\n    to: yup.string().min(1000000000, 'Phone number is invalid').max(999999999999, 'Phone number is invalid').required(\"To Is required\"),\r\n    message: yup.string(),\r\n    createFor: yup.string().required(\"Create By Is required\")\r\n})","import * as yup from 'yup'\r\n\r\nexport const TaskSchema = yup.object({\r\n    title: yup.string().required(\"Title Is required\"),\r\n    category: yup.string(),\r\n    description: yup.string(),\r\n    notes: yup.string(),\r\n    // assignmentTo: yup.string(),\r\n    // assignmentToLead: yup.string(),\r\n    reminder: yup.string(),\r\n    start: yup.string().required(\"Start Is required\"),\r\n    end: yup.string(),\r\n    backgroundColor: yup.string(),\r\n    borderColor: yup.string(),\r\n    textColor: yup.string(),\r\n    display: yup.string(),\r\n    url: yup.string(),\r\n    createBy: yup.string(),\r\n})","import * as yup from 'yup'\r\n\r\nexport const MeetingSchema = yup.object({\r\n    agenda: yup.string().required(\"Agenda Is required\"),\r\n    attendes: yup.array().of(yup.string().trim()),\r\n    attendesLead: yup.array().of(yup.string().trim()),\r\n    location: yup.string(),\r\n    related: yup.string(),\r\n    dateTime: yup.string().required(\"Date Time Is required\"),\r\n    notes: yup.string(),\r\n    createFor: yup.string(),\r\n    createdBy: yup.string(),\r\n})"],"names":["props","variant","children","rest","styles","useStyleConfig","_jsx","Box","__css","height","ContactTable","columnsData","tableData","title","type","selectedValues","setSelectedValues","columns","useMemo","data","user","JSON","parse","localStorage","getItem","gopageValue","setGopageValue","useState","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","length","textColor","useColorModeValue","borderColor","handleCheckboxChange","event","value","target","checked","prevSelectedValues","filter","selectedValue","_jsxs","Card","direction","w","px","style","border","overflowX","sm","lg","Flex","justify","mb","align","Text","color","fontSize","fontWeight","lineHeight","CountUpComponent","targetNumber","overflowY","className","Table","Thead","map","headerGroup","index","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","getHeaderProps","getSortByToggleProps","pe","render","Tbody","Td","colSpan","textAlign","width","row","_row$cells","getRowProps","cells","cell","_cell$row","Header","Checkbox","colorScheme","isChecked","includes","onChange","me","_cell$row2","_cell$row3","Link","to","role","original","_id","sx","textDecoration","getCellProps","minW","md","Pagination","LeadTable","values","_ref","count","setCount","useEffect","interval","setInterval","prevCount","clearInterval","justifyContent","mt","alignItems","Tooltip","label","IconButton","onClick","isDisabled","icon","ArrowLeftIcon","h","mr","pre","ChevronLeftIcon","_Fragment","flexShrink","as","NumberInput","ml","min","max","defaultValue","NumberInputField","NumberInputStepper","NumberIncrementStepper","NumberDecrementStepper","Select","e","Number","ChevronRightIcon","ArrowRightIcon","Spinner","contactSchema","yup","firstName","required","lastName","email","phoneNumber","mobileNumber","notRequired","physicalAddress","mailingAddress","preferredContactMethod","leadSource","referralSource","campaignSource","leadStatus","leadRating","leadConversionProbability","emailHistory","phoneCallHistory","meetingHistory","notesandComments","tagsOrLabelsForcategorizingcontacts","birthday","anniversary","keyMilestones","dob","gender","occupation","interestsOrHobbies","communicationFrequency","preferences","linkedInProfile","facebookProfile","twitterHandle","otherProfiles","agentOrTeamMember","internalNotesOrComments","createBy","currentYear","Date","getFullYear","propertySchema","propertyType","propertyAddress","listingPrice","squareFootage","numberofBedrooms","numberofBathrooms","yearBuilt","propertyDescription","lotSize","parkingAvailability","appliancesIncluded","heatingAndCoolingSystems","flooringType","exteriorFeatures","communityAmenities","propertyPhotos","virtualToursOrVideos","floorPlans","propertyDocuments","listingStatus","listingAgentOrTeam","listingDate","marketingDescription","multipleListingService","previousOwners","purchaseHistory","propertyTaxes","homeownersAssociation","mortgageInformation","sellers","buyers","propertyManagers","contractorsOrServiceProviders","leadSchema","leadName","leadEmail","leadPhoneNumber","leadAddress","leadSourceDetails","leadCampaign","leadSourceChannel","leadSourceMedium","leadSourceCampaign","leadSourceReferral","leadAssignedAgent","leadOwner","leadCommunicationPreferences","leadCreationDate","leadConversionDate","leadFollowUpDate","leadFollowUpStatus","leadScore","leadNurturingWorkflow","leadEngagementLevel","leadConversionRate","leadNurturingStage","leadNextAction","userSchema","matches","username","loginSchema","password","emailSchema","sender","recipient","cc","bcc","relatedToContact","relatedToLead","subject","message","createByLead","test","this","createError","path","documentSchema","shape","folderName","filename","phoneCallSchema","callDuration","callNotes","category","textMsgSchema","createFor","TaskSchema","description","notes","reminder","start","end","backgroundColor","display","url","MeetingSchema","agenda","attendes","of","trim","attendesLead","location","related","dateTime","createdBy"],"sourceRoot":""}