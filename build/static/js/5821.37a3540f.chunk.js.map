{"version":3,"file":"static/js/5821.37a3540f.chunk.js","mappings":"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","sources":["views/admin/property/components/CheckTable.js","views/admin/property/index.js","../node_modules/@chakra-ui/icons/dist/esm/Delete.mjs","../node_modules/@chakra-ui/react/dist/esm/grid/grid-item.mjs","../node_modules/@chakra-ui/react/dist/esm/grid/grid.mjs"],"sourcesContent":["import {\r\n  Box,\r\n  Checkbox,\r\n  Flex,\r\n  Table,\r\n  Tbody,\r\n  Td,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr,\r\n  useColorModeValue\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport {\r\n  useGlobalFilter,\r\n  usePagination,\r\n  useSortBy,\r\n  useTable,\r\n} from \"react-table\";\r\n\r\n// Custom components\r\nimport { DeleteIcon } from \"@chakra-ui/icons\";\r\nimport Card from \"components/card/Card\";\r\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\r\nimport Pagination from \"components/pagination/Pagination\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\nimport { FaSort, FaSortDown, FaSortUp } from \"react-icons/fa\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getApi } from \"services/api\";\r\nimport Delete from \"../Delete\";\r\n// import '.\\src\\assets\\css\\App.css' \r\nexport default function CheckTable(props) {\r\n  const { columnsData } = props;\r\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n  const borderColor = useColorModeValue(\"gray.200\", \"whiteAlpha.100\");\r\n  const columns = useMemo(() => columnsData, [columnsData]);\r\n  const [selectedValues, setSelectedValues] = useState([]);\r\n  const [isLoding, setIsLoding] = useState(false)\r\n  const [deleteModel, setDelete] = useState(false);\r\n  // const data = useMemo(() => tableData, [tableData]);\r\n  const [data, setData] = useState([])\r\n  const user = JSON.parse(localStorage.getItem(\"user\"))\r\n  const [gopageValue, setGopageValue] = useState()\r\n\r\n  const fetchData = async () => {\r\n    setIsLoding(true)\r\n    let result = await getApi(user.role === 'admin' ? 'api/property/' : `api/property/?createBy=${user._id}`);\r\n    setData(result.data);\r\n    setIsLoding(false)\r\n  }\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns, data,\r\n      initialState: { pageIndex: 0 }\r\n    },\r\n    useGlobalFilter,\r\n    useSortBy,\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize }\r\n  } = tableInstance;\r\n\r\n  if (pageOptions.length < gopageValue) {\r\n    setGopageValue(pageOptions.length)\r\n  }\r\n\r\n\r\n  const handleCheckboxChange = (event, value) => {\r\n    if (event.target.checked) {\r\n      setSelectedValues((prevSelectedValues) => [...prevSelectedValues, value]);\r\n    } else {\r\n      setSelectedValues((prevSelectedValues) =>\r\n        prevSelectedValues.filter((selectedValue) => selectedValue !== value)\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n  }, [deleteModel, props.isOpen])\r\n\r\n  return (\r\n    <Card\r\n      direction=\"column\"\r\n      w=\"100%\"\r\n      px=\"0px\"\r\n      overflowX={{ sm: \"scroll\", lg: \"hidden\" }}\r\n    >\r\n      <Flex px=\"25px\" justify=\"space-between\" mb=\"15px\" align=\"center\">\r\n        <Text\r\n          color={textColor}\r\n          fontSize=\"22px\"\r\n          fontWeight=\"700\"\r\n          lineHeight=\"100%\"\r\n        >\r\n          Properties (<CountUpComponent targetNumber={data?.length} />)\r\n        </Text>\r\n        {/* <Menu /> */}\r\n        {selectedValues.length > 0 && <DeleteIcon onClick={() => setDelete(true)} color={'red'} />}\r\n      </Flex>\r\n      {/* Delete model */}\r\n      <Delete isOpen={deleteModel} onClose={setDelete} setSelectedValues={setSelectedValues} url='api/property/deleteMany' data={selectedValues} method='many' />\r\n\r\n      <Box overflowY={\"auto\"} className=\"table-fix-container\">\r\n        <Table {...getTableProps()} variant=\"simple\" color=\"gray.500\" mb=\"24px\">\r\n          <Thead>\r\n            {headerGroups?.map((headerGroup, index) => (\r\n              <Tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                {headerGroup.headers?.map((column, index) => (\r\n                  <Th\r\n                    {...column.getHeaderProps(column.isSortable !== false && column.getSortByToggleProps())}\r\n                    pe=\"10px\"\r\n                    key={index}\r\n                    borderColor={borderColor}\r\n                  >\r\n                    <Flex\r\n                      justify=\"space-between\"\r\n                      align=\"center\"\r\n                      fontSize={{ sm: \"10px\", lg: \"12px\" }}\r\n                      color=\"gray.400\"\r\n                    >\r\n                      {column.render(\"Header\")}\r\n                      {column.isSortable !== false && (\r\n                        <span>\r\n                          {column.isSorted ? (column.isSortedDesc ? <FaSortDown /> : <FaSortUp />) : <FaSort />}\r\n                        </span>\r\n                      )}\r\n                    </Flex>\r\n                  </Th>\r\n                ))}\r\n              </Tr>\r\n            ))}\r\n          </Thead>\r\n          <Tbody {...getTableBodyProps()}>\r\n            {isLoding ?\r\n              <Tr>\r\n                <Td colSpan={columns?.length} >\r\n                  <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                    <Spinner />\r\n                  </Flex>\r\n                </Td>\r\n              </Tr>\r\n              : data?.length === 0 ? (\r\n                <Tr>\r\n                  <Td colSpan={columns.length} className=\"tableData\">\r\n                    <Text textAlign={'center'} width=\"100%\" color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                      -- No Data Found --\r\n                    </Text>\r\n                  </Td>\r\n                </Tr>\r\n              ) : page?.map((row, i) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <Tr {...row?.getRowProps()} key={i}>\r\n                    {row?.cells?.map((cell, index) => {\r\n                      let data = \"\";\r\n                      if (cell?.column.Header === \"#\") {\r\n                        data = (\r\n                          <Flex align=\"center\">\r\n                            <Checkbox colorScheme=\"brandScheme\" value={selectedValues} isChecked={selectedValues.includes(cell?.value)} onChange={(event) => handleCheckboxChange(event, cell?.value)} me=\"10px\" />\r\n                            <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\">\r\n                              {cell?.row?.index + 1}\r\n                            </Text>\r\n                          </Flex>\r\n                        );\r\n                      } else if (cell?.column.Header === \"property Type\") {\r\n                        data = (\r\n                          <Link to={user?.role !== 'admin' ? `/propertyView/${cell?.row?.values._id}` : `/admin/propertyView/${cell?.row?.values._id}`}>\r\n                            <Text\r\n                              className=\"tableData\"\r\n                              me=\"10px\"\r\n                              sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}\r\n                              color='green.400'\r\n                              fontSize=\"sm\"\r\n                              fontWeight=\"700\"\r\n                            >\r\n                              {cell?.value}\r\n                            </Text>\r\n                          </Link>\r\n                        );\r\n                      } else if (cell?.column.Header === \"property Address\") {\r\n                        data = (\r\n                          <Text\r\n                            className=\"tableData\"\r\n                            me=\"10px\"\r\n                            color={textColor}\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                          >\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      } else if (cell?.column.Header === \"listing Price\") {\r\n                        data = (\r\n                          <Text\r\n                            className=\"tableData\"\r\n                            me=\"10px\"\r\n                            color={textColor}\r\n                            fontSize=\"sm\"\r\n                            fontWeight=\"700\"\r\n                          >\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      } else if (cell?.column.Header === \"square Footage\") {\r\n                        data = (\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\" className=\"tableData\">\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      } else if (cell?.column.Header === \"year Built\") {\r\n                        data = (\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\" className=\"tableData\">\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      } else if (cell?.column.Header === \"number of Bedrooms\") {\r\n                        data = (\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\" className=\"tableData\">\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      } else if (cell?.column.Header === \"number of Bathrooms\") {\r\n                        data = (\r\n                          <Text color={textColor} fontSize=\"sm\" fontWeight=\"700\" className=\"tableData\">\r\n                            {cell?.value}\r\n                          </Text>\r\n                        );\r\n                      }\r\n                      return (\r\n                        <Td\r\n                          className=\"tableData\"\r\n                          {...cell?.getCellProps()}\r\n                          key={index}\r\n                          fontSize={{ sm: \"14px\" }}\r\n                          minW={{ sm: \"150px\", md: \"200px\", lg: \"auto\" }}\r\n                          borderColor=\"transparent\"\r\n                        >\r\n                          {data}\r\n                        </Td>\r\n                      );\r\n                    })}\r\n                  </Tr>\r\n                );\r\n              })}\r\n          </Tbody>\r\n        </Table>\r\n      </Box>\r\n      {data?.length > 5 && <Pagination gotoPage={gotoPage} gopageValue={gopageValue} setGopageValue={setGopageValue} pageCount={pageCount} canPreviousPage={canPreviousPage} previousPage={previousPage} canNextPage={canNextPage} pageOptions={pageOptions} setPageSize={setPageSize} nextPage={nextPage} pageSize={pageSize} pageIndex={pageIndex} />}\r\n\r\n\r\n    </Card>\r\n  );\r\n}\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Button, Grid, GridItem, useDisclosure } from '@chakra-ui/react';\r\nimport { useEffect, useState } from 'react';\r\nimport Add from \"./Add\";\r\nimport CheckTable from './components/CheckTable';\r\n\r\nconst Index = () => {\r\n    const [columns, setColumns] = useState([]);\r\n\r\n    const tableColumns = [\r\n        {\r\n            Header: \"#\",\r\n            accessor: \"_id\",\r\n            isSortable: false,\r\n            width: 10\r\n        },\r\n        { Header: 'property Type', accessor: 'propertyType' },\r\n        { Header: \"property Address\", accessor: \"propertyAddress\", },\r\n        { Header: \"listing Price\", accessor: \"listingPrice\", },\r\n        { Header: \"square Footage\", accessor: \"squareFootage\", },\r\n        { Header: \"year Built\", accessor: \"yearBuilt\", },\r\n        { Header: \"number of Bedrooms\", accessor: \"numberofBedrooms\", },\r\n        { Header: \"number of Bathrooms\", accessor: \"numberofBathrooms\", },\r\n    ];\r\n\r\n    const { isOpen, onOpen, onClose } = useDisclosure()\r\n    const size = \"lg\";\r\n\r\n    useEffect(() => {\r\n        setColumns(tableColumns)\r\n    }, [onClose])\r\n\r\n\r\n    const handleClick = () => {\r\n        onOpen()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid templateColumns=\"repeat(6, 1fr)\" mb={3} gap={1}>\r\n                <GridItem colStart={6} textAlign={\"right\"}>\r\n                    <Button onClick={() => handleClick()} leftIcon={<AddIcon />} variant=\"brand\">Add</Button>\r\n                </GridItem>\r\n            </Grid>\r\n            <CheckTable columnsData={columns} isOpen={isOpen} />\r\n            {/* Add Form */}\r\n            <Add isOpen={isOpen} size={size} onClose={onClose} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Index\r\n","import { jsx } from 'react/jsx-runtime';\nimport { createIcon } from '@chakra-ui/react';\n\nconst DeleteIcon = createIcon({\n  displayName: \"DeleteIcon\",\n  path: /* @__PURE__ */ jsx(\"g\", { fill: \"currentColor\", children: /* @__PURE__ */ jsx(\"path\", { d: \"M19.452 7.5H4.547a.5.5 0 00-.5.545l1.287 14.136A2 2 0 007.326 24h9.347a2 2 0 001.992-1.819L19.95 8.045a.5.5 0 00-.129-.382.5.5 0 00-.369-.163zm-9.2 13a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zm5 0a.75.75 0 01-1.5 0v-9a.75.75 0 011.5 0zM22 4h-4.75a.25.25 0 01-.25-.25V2.5A2.5 2.5 0 0014.5 0h-5A2.5 2.5 0 007 2.5v1.25a.25.25 0 01-.25.25H2a1 1 0 000 2h20a1 1 0 000-2zM9 3.75V2.5a.5.5 0 01.5-.5h5a.5.5 0 01.5.5v1.25a.25.25 0 01-.25.25h-5.5A.25.25 0 019 3.75z\" }) })\n});\n\nexport { DeleteIcon };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { compact, mapResponsive } from '@chakra-ui/utils';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nfunction spanFn(span) {\n  return mapResponsive(\n    span,\n    (value) => value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`\n  );\n}\nconst GridItem = forwardRef(\n  function GridItem2(props, ref) {\n    const {\n      area,\n      colSpan,\n      colStart,\n      colEnd,\n      rowEnd,\n      rowSpan,\n      rowStart,\n      ...rest\n    } = props;\n    const styles = compact({\n      gridArea: area,\n      gridColumn: spanFn(colSpan),\n      gridRow: spanFn(rowSpan),\n      gridColumnStart: colStart,\n      gridColumnEnd: colEnd,\n      gridRowStart: rowStart,\n      gridRowEnd: rowEnd\n    });\n    return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n  }\n);\nGridItem.displayName = \"GridItem\";\n\nexport { GridItem };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Grid = forwardRef(function Grid2(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props;\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  };\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nGrid.displayName = \"Grid\";\n\nexport { Grid };\n"],"names":["CheckTable","props","columnsData","textColor","useColorModeValue","borderColor","columns","useMemo","selectedValues","setSelectedValues","useState","isLoding","setIsLoding","deleteModel","setDelete","data","setData","user","JSON","parse","localStorage","getItem","gopageValue","setGopageValue","tableInstance","useTable","initialState","pageIndex","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageSize","length","useEffect","async","result","getApi","role","_id","fetchData","isOpen","_jsxs","Card","direction","w","px","overflowX","sm","lg","children","Flex","justify","mb","align","Text","color","fontSize","fontWeight","lineHeight","_jsx","CountUpComponent","targetNumber","DeleteIcon","onClick","Delete","onClose","url","method","Box","overflowY","className","Table","variant","Thead","map","headerGroup","index","_headerGroup$headers","_createElement","Tr","getHeaderGroupProps","key","headers","column","Th","getHeaderProps","isSortable","getSortByToggleProps","pe","render","isSorted","isSortedDesc","FaSortDown","FaSortUp","FaSort","Tbody","Td","colSpan","justifyContent","alignItems","width","Spinner","textAlign","row","i","_row$cells","getRowProps","cells","cell","_cell$row","Header","Checkbox","colorScheme","value","isChecked","includes","onChange","event","handleCheckboxChange","target","checked","prevSelectedValues","filter","selectedValue","me","_cell$row2","_cell$row3","Link","to","values","sx","textDecoration","getCellProps","minW","md","Pagination","Index","setColumns","tableColumns","accessor","onOpen","useDisclosure","Grid","templateColumns","gap","GridItem","colStart","Button","leftIcon","AddIcon","Add","size","createIcon","displayName","path","jsx","fill","d","spanFn","span","mapResponsive","forwardRef","ref","area","colEnd","rowEnd","rowSpan","rowStart","rest","styles","compact","gridArea","gridColumn","gridRow","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","chakra","div","__css","templateAreas","rowGap","columnGap","autoFlow","autoRows","templateRows","autoColumns","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns"],"sourceRoot":""}