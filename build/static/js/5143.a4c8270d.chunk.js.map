{"version":3,"file":"static/js/5143.a4c8270d.chunk.js","mappings":"yOAOA,MA8DA,EA9DaA,KACT,MAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,IAAYC,EAAAA,EAAAA,MAC7BC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,MAC7BK,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,SAWvCC,EAAYC,UACdT,GAAa,GACbE,EAAS,MACT,IACI,MAAMQ,QAAeC,EAAAA,EAAAA,IAAqB,UAAdR,EAAKS,KAAmB,YAAc,sBAAsBT,EAAKU,OAC7FhB,EAAQa,EAAOd,KACnB,CAAE,MAAOkB,GACLZ,EAAS,gDACb,CAAC,QACGF,GAAa,EACjB,GAaJ,OAVAe,EAAAA,EAAAA,YAAU,KACNP,IAGO,KAEHQ,QAAQC,IAAI,8BAA8B,IAE/C,KAGCC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,WAAY,SAAUC,eAAgB,WAAYC,SAAU,OAAQC,GAAI,EAAEN,UAC5EC,EAAAA,EAAAA,KAACM,EAAAA,EAAM,CAACC,QAASlC,EAAQmC,UAAUR,EAAAA,EAAAA,KAACS,EAAAA,EAAO,IAAKC,QAAQ,QAAOX,SAAC,kBAGnEpB,GACGqB,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,WAAW,SAASC,eAAe,SAASQ,OAAO,QAAOZ,UAC5DC,EAAAA,EAAAA,KAACY,EAAAA,EAAO,CAACC,KAAK,SAElBhC,GACAmB,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,WAAW,SAASC,eAAe,SAASQ,OAAO,QAAOZ,UAC5DC,EAAAA,EAAAA,KAACc,EAAAA,EAAI,CAACC,MAAM,UAAShB,SAAElB,OAG3BmB,EAAAA,EAAAA,KAACgB,EAAAA,EAAU,CAACC,YA/CR,CACZ,CAAEC,OAAQ,IAAKC,SAAU,MAAOC,YAAY,EAAOC,MAAO,GAC1D,CAAEH,OAAQ,QAASC,SAAU,SAC7B,CAAED,OAAQ,UAAWC,SAAU,YAC/B,CAAED,OAAQ,gBAAiBC,SAAU,oBACrC,CAAED,OAAQ,aAAcC,SAAU,SAClC,CAAED,OAAQ,WAAYC,SAAU,QAyCU/B,UAAWA,EAAWZ,KAAMA,EAAMG,UAAWA,EAAW2C,UAAU,yBAGxGtB,EAAAA,EAAAA,KAACuB,EAAAA,EAAO,CAACnD,OAAQA,EAAQgB,UAAWA,EAAWd,QAASA,MACtD,ECxDd,EANckD,KAENxB,EAAAA,EAAAA,KAAC7B,EAAI,G,kCCHb,MAAMsC,GAAUgB,E,QAAAA,GAAW,CACzBC,EAAG,kOACHC,YAAa,W,+CCDf,MAAMC,GAAWH,E,QAAAA,GAAW,CAC1BE,YAAa,WACbE,MAAsBC,EAAAA,EAAAA,MAAK,IAAK,CAAEC,KAAM,eAAgBhC,SAAU,EAChDiC,EAAAA,EAAAA,KAAI,OAAQ,CAAEN,EAAG,0QACjBM,EAAAA,EAAAA,KAAI,SAAU,CAAEC,GAAI,KAAMC,GAAI,KAAMC,EAAG,U","sources":["views/admin/task/task.js","views/admin/task/index.js","../node_modules/@chakra-ui/icons/dist/esm/Add.mjs","../node_modules/@chakra-ui/icons/dist/esm/View.mjs"],"sourcesContent":["import { AddIcon } from '@chakra-ui/icons';\r\nimport { Button, Flex, Spinner, Text, useDisclosure } from '@chakra-ui/react';\r\nimport { useEffect, useState } from 'react';\r\nimport { getApi } from 'services/api';\r\nimport CheckTable from './components/CheckTable';\r\nimport AddTask from './components/addTask';\r\n\r\nconst Task = () => {\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const [data, setData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n    const columns = [\r\n        { Header: \"#\", accessor: \"_id\", isSortable: false, width: 5 },\r\n        { Header: 'Title', accessor: 'title' },\r\n        { Header: \"Related\", accessor: \"category\" },\r\n        { Header: \"Assignment To\", accessor: \"assignmentToName\" },\r\n        { Header: \"Start Date\", accessor: \"start\" },\r\n        { Header: \"End Date\", accessor: \"end\" },\r\n    ];\r\n\r\n    const fetchData = async () => {\r\n        setIsLoading(true);\r\n        setError(null);\r\n        try {\r\n            const result = await getApi(user.role === 'admin' ? 'api/task/' : `api/task/?createBy=${user._id}`);\r\n            setData(result.data);\r\n        } catch (err) {\r\n            setError('Failed to fetch data. Please try again later.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n\r\n        // Cleanup function, if needed\r\n        return () => {\r\n            // If you have any subscriptions or side-effects that need cleanup, handle them here\r\n            console.log(\"Cleanup logic here (if any)\");\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Flex alignItems={'center'} justifyContent={\"flex-end\"} flexWrap={'wrap'} mb={3}>\r\n                <Button onClick={onOpen} leftIcon={<AddIcon />} variant=\"brand\">Create Task</Button>\r\n            </Flex>\r\n\r\n            {isLoading ? (\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" height=\"200px\">\r\n                    <Spinner size=\"xl\" />\r\n                </Flex>\r\n            ) : error ? (\r\n                <Flex alignItems=\"center\" justifyContent=\"center\" height=\"200px\">\r\n                    <Text color=\"red.500\">{error}</Text>\r\n                </Flex>\r\n            ) : (\r\n                <CheckTable columnsData={columns} fetchData={fetchData} data={data} isLoading={isLoading} className='table-fix-container' />\r\n            )}\r\n\r\n            <AddTask isOpen={isOpen} fetchData={fetchData} onClose={onClose} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Task;\r\n","import Task from \"./task\";\r\n\r\n\r\nconst Index = () => {\r\n    return (\r\n        <Task />\r\n    )\r\n}\r\n\r\nexport default Index\r\n","import { createIcon } from '@chakra-ui/react';\n\nconst AddIcon = createIcon({\n  d: \"M0,12a1.5,1.5,0,0,0,1.5,1.5h8.75a.25.25,0,0,1,.25.25V22.5a1.5,1.5,0,0,0,3,0V13.75a.25.25,0,0,1,.25-.25H22.5a1.5,1.5,0,0,0,0-3H13.75a.25.25,0,0,1-.25-.25V1.5a1.5,1.5,0,0,0-3,0v8.75a.25.25,0,0,1-.25.25H1.5A1.5,1.5,0,0,0,0,12Z\",\n  displayName: \"AddIcon\"\n});\n\nexport { AddIcon };\n","import { jsxs, jsx } from 'react/jsx-runtime';\nimport { createIcon } from '@chakra-ui/react';\n\nconst ViewIcon = createIcon({\n  displayName: \"ViewIcon\",\n  path: /* @__PURE__ */ jsxs(\"g\", { fill: \"currentColor\", children: [\n    /* @__PURE__ */ jsx(\"path\", { d: \"M23.432,10.524C20.787,7.614,16.4,4.538,12,4.6,7.6,4.537,3.213,7.615.568,10.524a2.211,2.211,0,0,0,0,2.948C3.182,16.351,7.507,19.4,11.839,19.4h.308c4.347,0,8.671-3.049,11.288-5.929A2.21,2.21,0,0,0,23.432,10.524ZM7.4,12A4.6,4.6,0,1,1,12,16.6,4.6,4.6,0,0,1,7.4,12Z\" }),\n    /* @__PURE__ */ jsx(\"circle\", { cx: \"12\", cy: \"12\", r: \"2\" })\n  ] })\n});\n\nexport { ViewIcon };\n"],"names":["Task","isOpen","onOpen","onClose","useDisclosure","data","setData","useState","isLoading","setIsLoading","error","setError","user","JSON","parse","localStorage","getItem","fetchData","async","result","getApi","role","_id","err","useEffect","console","log","_jsxs","children","_jsx","Flex","alignItems","justifyContent","flexWrap","mb","Button","onClick","leftIcon","AddIcon","variant","height","Spinner","size","Text","color","CheckTable","columnsData","Header","accessor","isSortable","width","className","AddTask","Index","createIcon","d","displayName","ViewIcon","path","jsxs","fill","jsx","cx","cy","r"],"sourceRoot":""}