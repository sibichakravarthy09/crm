{"version":3,"file":"static/js/3093.152e8255.chunk.js","mappings":"2IAYA,QAXA,SAAcA,GACZ,MAAM,QAAEC,EAAO,SAAEC,KAAaC,GAASH,EACjCI,GAASC,EAAAA,EAAAA,GAAe,OAAQ,CAAEJ,YAExC,OACEK,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,MAAOJ,EAAQK,OAAQ,UAAYN,EAAID,SACzCA,GAGP,C,+CCTA,MAEA,EAFgBQ,KAAMJ,EAAAA,EAAAA,KAAA,OAAKK,UAAU,U,gNCSrC,MAmGA,EAnGaC,KAET,MAAMC,GAAQC,EAAAA,EAAAA,MAEPC,EAAMC,IAAWC,EAAAA,EAAAA,YAClBC,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,UACtCC,EAAUC,IAAeP,EAAAA,EAAAA,WAAS,GAYzC,OAJAQ,EAAAA,EAAAA,YAAU,KANQC,WACdF,GAAY,GACZ,IAAIG,QAAiBC,EAAAA,EAAAA,IAAO,sBAAuBf,EAAMgB,IACzDb,EAAgB,OAARW,QAAQ,IAARA,OAAQ,EAARA,EAAUZ,MAClBS,GAAY,EAAM,EAGlBM,EAAW,GACZ,KAGCxB,EAAAA,EAAAA,KAAAyB,EAAAA,SAAA,CAAA7B,SAEKqB,GACGjB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAI,CAACC,eAAgB,SAAUC,WAAY,SAAUC,MAAM,OAAMjC,UAC9DI,EAAAA,EAAAA,KAACI,EAAAA,EAAO,OACFJ,EAAAA,EAAAA,KAAAyB,EAAAA,SAAA,CAAA7B,UACNI,EAAAA,EAAAA,KAAC8B,EAAAA,EAAI,CAACC,gBAAgB,iBAAiBC,IAAK,EAAEpC,UAC1CI,EAAAA,EAAAA,KAACiC,EAAAA,EAAQ,CAACC,QAAS,CAAEC,KAAM,GAAIvC,UAC3BI,EAAAA,EAAAA,KAACoC,EAAAA,EAAI,CAAAxC,UACDyC,EAAAA,EAAAA,MAACP,EAAAA,EAAI,CAACC,gBAAiB,CAAEI,KAAM,OAASH,IAAK,EAAEpC,SAAA,EAC3CI,EAAAA,EAAAA,KAACiC,EAAAA,EAAQ,CAACC,QAAS,EAAEtC,UACjByC,EAAAA,EAAAA,MAACpC,EAAAA,EAAG,CAAAL,SAAA,EACAI,EAAAA,EAAAA,KAACsC,EAAAA,EAAO,CAACC,KAAK,KAAKC,GAAI,EAAE5C,SAAC,oBAG1BI,EAAAA,EAAAA,KAACyC,EAAAA,EAAU,UAGnBJ,EAAAA,EAAAA,MAACP,EAAAA,EAAI,CAACC,gBAAiB,iBAAkBC,IAAK,EAAEpC,SAAA,EAC5CyC,EAAAA,EAAAA,MAACJ,EAAAA,EAAQ,CAACC,QAAS,CAAEC,KAAM,EAAGO,GAAI,GAAI9C,SAAA,EAClCI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAACC,SAAS,KAAKC,WAAW,OAAOC,MAAO,iBAAiBlD,SAAC,cAC/DI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAAA/C,SAAM,OAAJa,QAAI,IAAJA,GAAAA,EAAMsC,WAAiB,OAAJtC,QAAI,IAAJA,OAAI,EAAJA,EAAMsC,WAAa,YAEjDV,EAAAA,EAAAA,MAACJ,EAAAA,EAAQ,CAACC,QAAS,CAAEC,KAAM,EAAGO,GAAI,GAAI9C,SAAA,EAClCI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAACC,SAAS,KAAKC,WAAW,OAAOC,MAAO,iBAAiBlD,SAAC,iBAC/DI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAAA/C,SAAM,OAAJa,QAAI,IAAJA,GAAAA,EAAMuC,UAAgB,OAAJvC,QAAI,IAAJA,OAAI,EAAJA,EAAMuC,UAAY,YAE/CX,EAAAA,EAAAA,MAACJ,EAAAA,EAAQ,CAACC,QAAS,CAAEC,KAAM,EAAGO,GAAI,GAAI9C,SAAA,EAClCI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAACC,SAAS,KAAKC,WAAW,OAAOC,MAAO,iBAAiBlD,SAAC,iBAC/DI,EAAAA,EAAAA,KAACiD,EAAAA,GAAI,CAACC,GAAQ,OAAJzC,QAAI,IAAJA,GAAAA,EAAM0C,SAA0B,WAAX,OAAJvC,QAAI,IAAJA,OAAI,EAAJA,EAAMwC,MAAmB,gBAAoB,OAAJ3C,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,WAAa,sBAA0B,OAAJ1C,QAAI,IAAJA,OAAI,EAAJA,EAAM0C,WAA4B,WAAX,OAAJvC,QAAI,IAAJA,OAAI,EAAJA,EAAMwC,MAAmB,aAAiB,OAAJ3C,QAAI,IAAJA,OAAI,EAAJA,EAAM4C,eAAiB,mBAAuB,OAAJ5C,QAAI,IAAJA,OAAI,EAAJA,EAAM4C,eAAezD,UACjOI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAACG,MAAM,YAAYQ,GAAI,CAAE,UAAW,CAAER,MAAO,WAAYS,eAAgB,cAAgB3D,SAAM,OAAJa,QAAI,IAAJA,GAAAA,EAAM+C,aAAmB,OAAJ/C,QAAI,IAAJA,OAAI,EAAJA,EAAM+C,aAAe,cAGlJnB,EAAAA,EAAAA,MAACJ,EAAAA,EAAQ,CAACC,QAAS,CAAEC,KAAM,EAAGO,GAAI,GAAI9C,SAAA,EAClCI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAACC,SAAS,KAAKC,WAAW,OAAOC,MAAO,iBAAiBlD,SAAC,mBAC/DI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAAA/C,SAAM,OAAJa,QAAI,IAAJA,GAAAA,EAAM0C,SAAW,WAAgB,OAAJ1C,QAAI,IAAJA,OAAI,EAAJA,EAAM4C,eAAgB,aAG9DhB,EAAAA,EAAAA,MAACJ,EAAAA,EAAQ,CAACC,QAAS,CAAEC,KAAM,EAAGO,GAAI,GAAI9C,SAAA,EAClCI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAACC,SAAS,KAAKC,WAAW,OAAOC,MAAO,iBAAiBlD,SAAC,kBAC/DyC,EAAAA,EAAAA,MAACM,EAAAA,EAAI,CAAA/C,SAAA,CAAC,IAAM,OAAJa,QAAI,IAAJA,GAAAA,EAAMgD,UAAYC,IAAW,OAAJjD,QAAI,IAAJA,OAAI,EAAJA,EAAMgD,WAAWE,OAAO,QAAU,MAAM,WAE7EtB,EAAAA,EAAAA,MAACJ,EAAAA,EAAQ,CAACC,QAAS,CAAEC,KAAM,EAAGO,GAAI,GAAI9C,SAAA,EAClCI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAACC,SAAS,KAAKC,WAAW,OAAOC,MAAO,iBAAiBlD,SAAC,eAC/DyC,EAAAA,EAAAA,MAACM,EAAAA,EAAI,CAAA/C,SAAA,CAAC,IAAM,OAAJa,QAAI,IAAJA,GAAAA,EAAMmD,QAAUF,IAAW,OAAJjD,QAAI,IAAJA,OAAI,EAAJA,EAAMmD,SAASD,OAAO,QAAU,MAAM,WAEzEtB,EAAAA,EAAAA,MAACJ,EAAAA,EAAQ,CAACC,QAAS,CAAEC,KAAM,EAAGO,GAAI,GAAI9C,SAAA,EAClCI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAACC,SAAS,KAAKC,WAAW,OAAOC,MAAO,iBAAiBlD,SAAC,iBAC/DyC,EAAAA,EAAAA,MAACM,EAAAA,EAAI,CAAA/C,SAAA,CAAC,IAAM,OAAJa,QAAI,IAAJA,GAAAA,EAAMoD,UAAYH,IAAW,OAAJjD,QAAI,IAAJA,OAAI,EAAJA,EAAMoD,WAAWF,OAAO,sBAAwB,MAAM,KAAO,OAAJlD,QAAI,IAAJA,GAAAA,EAAMoD,UAAYH,IAAW,OAAJjD,QAAI,IAAJA,OAAI,EAAJA,EAAMoD,WAAWC,QAAU,MAAM,WAExJzB,EAAAA,EAAAA,MAACJ,EAAAA,EAAQ,CAACC,QAAS,CAAEC,KAAM,EAAGO,GAAI,GAAI9C,SAAA,EAClCI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAACC,SAAS,KAAKC,WAAW,OAAOC,MAAO,iBAAiBlD,SAAC,qBAC/DI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAAA/C,SAAM,OAAJa,QAAI,IAAJA,GAAAA,EAAMsD,aAAmB,OAAJtD,QAAI,IAAJA,OAAI,EAAJA,EAAMsD,aAAe,YAErD1B,EAAAA,EAAAA,MAACJ,EAAAA,EAAQ,CAACC,QAAS,CAAEC,KAAM,GAAIvC,SAAA,EAC3BI,EAAAA,EAAAA,KAAC2C,EAAAA,EAAI,CAACC,SAAS,KAAKC,WAAW,OAAOC,MAAO,iBAAiBlD,SAAC,kBAC/DI,EAAAA,EAAAA,KAAA,OAAKgE,MAAO,CAAEC,WAAY,YAAarE,SAAM,OAAJa,QAAI,IAAJA,GAAAA,EAAMyD,UAAgB,OAAJzD,QAAI,IAAJA,OAAI,EAAJA,EAAMyD,UAAY,0BAoB9G,C,uFCnGX,SAASC,EAAOC,GACd,OAAOC,EAAAA,EAAAA,IACLD,GACCE,GAAoB,SAAVA,EAAmB,OAAS,QAAQA,UAAcA,KAEjE,CACA,MAAMrC,GAAWsC,EAAAA,EAAAA,IACf,SAAmB7E,EAAO8E,GACxB,MAAM,KACJC,EAAI,QACJvC,EAAO,SACPwC,EAAQ,OACRC,EAAM,OACNC,EAAM,QACNC,EAAO,SACPC,KACGjF,GACDH,EACEI,GAASiF,EAAAA,EAAAA,GAAQ,CACrBC,SAAUP,EACVQ,WAAYd,EAAOjC,GACnBgD,QAASf,EAAOU,GAChBM,gBAAiBT,EACjBU,cAAeT,EACfU,aAAcP,EACdQ,WAAYV,IAEd,OAAuBW,EAAAA,EAAAA,KAAIC,EAAAA,EAAOC,IAAK,CAAEjB,MAAKtE,MAAOJ,KAAWD,GAClE,IAEFoC,EAASyD,YAAc,U,mEC/BvB,MAAM5D,GAAOyC,EAAAA,EAAAA,IAAW,SAAe7E,EAAO8E,GAC5C,MAAM,cACJmB,EAAa,IACb3D,EAAG,OACH4D,EAAM,UACNC,EAAS,OACTC,EAAM,IACNC,EAAG,SACHC,EAAQ,SACRC,EAAQ,aACRC,EAAY,YACZC,EAAW,gBACXpE,KACGlC,GACDH,EACEI,EAAS,CACbsG,QAAS,OACTC,kBAAmBV,EACnBW,QAAStE,EACTuE,WAAYX,EACZY,cAAeX,EACfY,gBAAiBN,EACjBlB,WAAYa,EACZZ,QAASa,EACTW,aAAcV,EACdW,aAAcV,EACdW,iBAAkBV,EAClBW,oBAAqB9E,GAEvB,OAAuBwD,EAAAA,EAAAA,KAAIC,EAAAA,EAAOC,IAAK,CAAEjB,MAAKtE,MAAOJ,KAAWD,GAClE,IACAiC,EAAK4D,YAAc,M","sources":["components/card/Card.js","components/spinner/Spinner.js","views/admin/phoneCall/View.js","../node_modules/@chakra-ui/react/dist/esm/grid/grid-item.mjs","../node_modules/@chakra-ui/react/dist/esm/grid/grid.mjs"],"sourcesContent":["import { Box, useStyleConfig } from \"@chakra-ui/react\";\r\nfunction Card(props) {\r\n  const { variant, children, ...rest } = props;\r\n  const styles = useStyleConfig(\"Card\", { variant });\r\n\r\n  return (\r\n    <Box __css={styles} height={'100%'} {...rest}>\r\n      {children}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import './style.css';\r\nconst Spinner = () => <div className=\"loader\"></div>;\r\n\r\nexport default Spinner;","import { Box, Button, Flex, Grid, GridItem, Heading, Text, useDisclosure } from \"@chakra-ui/react\";\r\nimport Card from \"components/card/Card\";\r\nimport { HSeparator } from \"components/separator/Separator\";\r\nimport Spinner from \"components/spinner/Spinner\";\r\nimport moment from \"moment\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { IoIosArrowBack } from \"react-icons/io\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { getApi } from \"services/api\";\r\n\r\nconst View = () => {\r\n\r\n    const param = useParams()\r\n\r\n    const [data, setData] = useState()\r\n    const user = JSON.parse(localStorage.getItem(\"user\"))\r\n    const [isLoding, setIsLoding] = useState(false)\r\n\r\n    const fetchData = async () => {\r\n        setIsLoding(true)\r\n        let response = await getApi('api/phoneCall/view/', param.id)\r\n        setData(response?.data);\r\n        setIsLoding(false)\r\n    }\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n\r\n            {isLoding ?\r\n                <Flex justifyContent={'center'} alignItems={'center'} width=\"100%\" >\r\n                    <Spinner />\r\n                </Flex> : <>\r\n                    <Grid templateColumns=\"repeat(4, 1fr)\" gap={3}>\r\n                        <GridItem colSpan={{ base: 4 }}>\r\n                            <Card >\r\n                                <Grid templateColumns={{ base: \"1fr\" }} gap={4}>\r\n                                    <GridItem colSpan={2}>\r\n                                        <Box>\r\n                                            <Heading size=\"md\" mb={3}>\r\n                                                Call View page\r\n                                            </Heading>\r\n                                            <HSeparator />\r\n                                        </Box>\r\n                                    </GridItem>\r\n                                    <Grid templateColumns={'repeat(2, 1fr)'} gap={4}>\r\n                                        <GridItem colSpan={{ base: 2, md: 1 }}>\r\n                                            <Text fontSize=\"sm\" fontWeight=\"bold\" color={'blackAlpha.900'}> Sender </Text>\r\n                                            <Text>{data?.senderName ? data?.senderName : ' - '}</Text>\r\n                                        </GridItem>\r\n                                        <GridItem colSpan={{ base: 2, md: 1 }}>\r\n                                            <Text fontSize=\"sm\" fontWeight=\"bold\" color={'blackAlpha.900'}> Recipient </Text>\r\n                                            <Text>{data?.recipient ? data?.recipient : ' - '}</Text>\r\n                                        </GridItem>\r\n                                        <GridItem colSpan={{ base: 2, md: 1 }}>\r\n                                            <Text fontSize=\"sm\" fontWeight=\"bold\" color={'blackAlpha.900'}> Create to </Text>\r\n                                            <Link to={data?.createBy ? user?.role !== 'admin' ? `/contactView/${data?.createBy}` : `/admin/contactView/${data?.createBy}` : user?.role !== 'admin' ? `/leadView/${data?.createByLead}` : `/admin/leadView/${data?.createByLead}`}>\r\n                                                <Text color='green.400' sx={{ '&:hover': { color: 'blue.500', textDecoration: 'underline' } }}>{data?.createByName ? data?.createByName : ' - '}</Text>\r\n                                            </Link>\r\n                                        </GridItem>\r\n                                        <GridItem colSpan={{ base: 2, md: 1 }}>\r\n                                            <Text fontSize=\"sm\" fontWeight=\"bold\" color={'blackAlpha.900'}> Realeted To </Text>\r\n                                            <Text>{data?.createBy ? \"contact\" : data?.createByLead && \"lead\"}</Text>\r\n                                        </GridItem>\r\n\r\n                                        <GridItem colSpan={{ base: 2, md: 1 }}>\r\n                                            <Text fontSize=\"sm\" fontWeight=\"bold\" color={'blackAlpha.900'}> Start Date </Text>\r\n                                            <Text> {data?.startDate ? moment(data?.startDate).format('lll ') : ' - '} </Text>\r\n                                        </GridItem>\r\n                                        <GridItem colSpan={{ base: 2, md: 1 }}>\r\n                                            <Text fontSize=\"sm\" fontWeight=\"bold\" color={'blackAlpha.900'}>End Date </Text>\r\n                                            <Text> {data?.endDate ? moment(data?.endDate).format('lll ') : ' - '} </Text>\r\n                                        </GridItem>\r\n                                        <GridItem colSpan={{ base: 2, md: 1 }}>\r\n                                            <Text fontSize=\"sm\" fontWeight=\"bold\" color={'blackAlpha.900'}> Timestamp </Text>\r\n                                            <Text> {data?.timestamp ? moment(data?.timestamp).format('DD-MM-YYYY  h:mma ') : ' - '} [{data?.timestamp ? moment(data?.timestamp).toNow() : ' - '}]</Text>\r\n                                        </GridItem>\r\n                                        <GridItem colSpan={{ base: 2, md: 1 }}>\r\n                                            <Text fontSize=\"sm\" fontWeight=\"bold\" color={'blackAlpha.900'}> Call Duration </Text>\r\n                                            <Text>{data?.callDuration ? data?.callDuration : ' - '}</Text>\r\n                                        </GridItem>\r\n                                        <GridItem colSpan={{ base: 2 }}>\r\n                                            <Text fontSize=\"sm\" fontWeight=\"bold\" color={'blackAlpha.900'}> Call Notes </Text>\r\n                                            <pre style={{ whiteSpace: 'pre-wrap' }}>{data?.callNotes ? data?.callNotes : ' - '}</pre>\r\n                                        </GridItem>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </GridItem>\r\n\r\n                    </Grid>\r\n                </>}\r\n\r\n            {/* <Card mt={3}>\r\n                <Grid templateColumns=\"repeat(6, 1fr)\" gap={1}>\r\n                    <GridItem colStart={6} >\r\n                        <Flex justifyContent={\"right\"}>\r\n                            <Button onClick={() => setEdit(true)} leftIcon={<EditIcon />} variant=\"outline\" colorScheme=\"green\">Edit</Button>\r\n                            <Button style={{ background: 'red.800' }} ml={2.5} onClick={() => setDelete(true)} leftIcon={<DeleteIcon />} colorScheme=\"red\" >Delete</Button>\r\n                        </Flex>\r\n                    </GridItem>\r\n                </Grid>\r\n            </Card> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default View;\r\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { compact, mapResponsive } from '@chakra-ui/utils';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nfunction spanFn(span) {\n  return mapResponsive(\n    span,\n    (value) => value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`\n  );\n}\nconst GridItem = forwardRef(\n  function GridItem2(props, ref) {\n    const {\n      area,\n      colSpan,\n      colStart,\n      colEnd,\n      rowEnd,\n      rowSpan,\n      rowStart,\n      ...rest\n    } = props;\n    const styles = compact({\n      gridArea: area,\n      gridColumn: spanFn(colSpan),\n      gridRow: spanFn(rowSpan),\n      gridColumnStart: colStart,\n      gridColumnEnd: colEnd,\n      gridRowStart: rowStart,\n      gridRowEnd: rowEnd\n    });\n    return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n  }\n);\nGridItem.displayName = \"GridItem\";\n\nexport { GridItem };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Grid = forwardRef(function Grid2(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props;\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  };\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nGrid.displayName = \"Grid\";\n\nexport { Grid };\n"],"names":["props","variant","children","rest","styles","useStyleConfig","_jsx","Box","__css","height","Spinner","className","View","param","useParams","data","setData","useState","user","JSON","parse","localStorage","getItem","isLoding","setIsLoding","useEffect","async","response","getApi","id","fetchData","_Fragment","Flex","justifyContent","alignItems","width","Grid","templateColumns","gap","GridItem","colSpan","base","Card","_jsxs","Heading","size","mb","HSeparator","md","Text","fontSize","fontWeight","color","senderName","recipient","Link","to","createBy","role","createByLead","sx","textDecoration","createByName","startDate","moment","format","endDate","timestamp","toNow","callDuration","style","whiteSpace","callNotes","spanFn","span","mapResponsive","value","forwardRef","ref","area","colStart","colEnd","rowEnd","rowSpan","rowStart","compact","gridArea","gridColumn","gridRow","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","jsx","chakra","div","displayName","templateAreas","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns"],"sourceRoot":""}