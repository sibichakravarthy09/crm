{"version":3,"file":"static/js/2056.49c046d9.chunk.js","mappings":"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","sources":["components/card/Card.js","components/countUpComponent/countUpComponent.js","../node_modules/@chakra-ui/react/dist/esm/grid/simple-grid.mjs","../node_modules/@chakra-ui/react/dist/esm/stat/stat.mjs","../node_modules/@chakra-ui/react/dist/esm/stat/stat-label.mjs","../node_modules/@chakra-ui/react/dist/esm/stat/stat-number.mjs","components/card/MiniStatistics.js","components/icons/IconBox.js","views/admin/reports/components/chart.js","views/admin/default/index.jsx","views/admin/reports/components/reportChart.js","../node_modules/@chakra-ui/icons/dist/esm/View.mjs","../node_modules/@chakra-ui/react/dist/esm/grid/grid-item.mjs","../node_modules/@chakra-ui/react/dist/esm/grid/grid.mjs","../node_modules/@chakra-ui/react/dist/esm/select/select-field.mjs","../node_modules/@chakra-ui/react/dist/esm/select/select.mjs","../node_modules/@chakra-ui/utils/dist/esm/split.mjs"],"sourcesContent":["import { Box, useStyleConfig } from \"@chakra-ui/react\";\r\nfunction Card(props) {\r\n  const { variant, children, ...rest } = props;\r\n  const styles = useStyleConfig(\"Card\", { variant });\r\n\r\n  return (\r\n    <Box __css={styles} height={'100%'} {...rest}>\r\n      {children}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nfunction CountUpComponent({ targetNumber }) {\r\n    const [count, setCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (count < targetNumber) {\r\n                setCount(prevCount => prevCount + 1);\r\n            }\r\n        }, targetNumber > 500 ? 0 : 20); // Change the interval duration as needed (in milliseconds)\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    }, [count, targetNumber]);\r\n\r\n    return <span>{typeof targetNumber === \"number\" ? count : targetNumber}</span>\r\n}\r\n\r\nexport default CountUpComponent;\r\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { mapResponsive } from '@chakra-ui/utils';\nimport { Grid } from './grid.mjs';\nimport { useTheme } from '../system/use-theme.mjs';\nimport { getToken } from '../system/hooks.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\n\nconst SimpleGrid = forwardRef(\n  function SimpleGrid2(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props;\n    const theme = useTheme();\n    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n    return /* @__PURE__ */ jsx(\n      Grid,\n      {\n        ref,\n        gap: spacing,\n        columnGap: spacingX,\n        rowGap: spacingY,\n        templateColumns,\n        ...rest\n      }\n    );\n  }\n);\nSimpleGrid.displayName = \"SimpleGrid\";\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\nfunction countToColumns(count) {\n  return mapResponsive(\n    count,\n    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`\n  );\n}\n\nexport { SimpleGrid };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { omitThemingProps } from '@chakra-ui/styled-system';\nimport { createContext, cx } from '@chakra-ui/utils';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { useMultiStyleConfig } from '../system/use-style-config.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst [StatStylesProvider, useStatStyles] = createContext({\n  name: `StatStylesContext`,\n  errorMessage: `useStatStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Stat />\" `\n});\nconst Stat = forwardRef(function Stat2(props, ref) {\n  const styles = useMultiStyleConfig(\"Stat\", props);\n  const statStyles = {\n    position: \"relative\",\n    flex: \"1 1 0%\",\n    ...styles.container\n  };\n  const { className, children, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(StatStylesProvider, { value: styles, children: /* @__PURE__ */ jsx(\n    chakra.div,\n    {\n      ref,\n      ...rest,\n      className: cx(\"chakra-stat\", className),\n      __css: statStyles,\n      children: /* @__PURE__ */ jsx(\"dl\", { children })\n    }\n  ) });\n});\nStat.displayName = \"Stat\";\n\nexport { Stat, useStatStyles };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { cx } from '@chakra-ui/utils';\nimport { useStatStyles } from './stat.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst StatLabel = forwardRef(\n  function StatLabel2(props, ref) {\n    const styles = useStatStyles();\n    return /* @__PURE__ */ jsx(\n      chakra.dt,\n      {\n        ref,\n        ...props,\n        className: cx(\"chakra-stat__label\", props.className),\n        __css: styles.label\n      }\n    );\n  }\n);\nStatLabel.displayName = \"StatLabel\";\n\nexport { StatLabel };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { cx } from '@chakra-ui/utils';\nimport { useStatStyles } from './stat.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst StatNumber = forwardRef(\n  function StatNumber2(props, ref) {\n    const styles = useStatStyles();\n    return /* @__PURE__ */ jsx(\n      chakra.dd,\n      {\n        ref,\n        ...props,\n        className: cx(\"chakra-stat__number\", props.className),\n        __css: {\n          ...styles.number,\n          fontFeatureSettings: \"pnum\",\n          fontVariantNumeric: \"proportional-nums\"\n        }\n      }\n    );\n  }\n);\nStatNumber.displayName = \"StatNumber\";\n\nexport { StatNumber };\n","// Chakra imports\r\n// Chakra imports\r\nimport {\r\n  Flex,\r\n  Stat,\r\n  StatLabel,\r\n  StatNumber,\r\n  useColorModeValue,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\n// Custom components\r\nimport Card from \"components/card/Card.js\";\r\nimport CountUpComponent from \"components/countUpComponent/countUpComponent\";\r\n// Custom icons\r\nimport React from \"react\";\r\n\r\nexport default function Default(props) {\r\n  const { startContent, endContent, name, growth, value } = props;\r\n  const textColor = useColorModeValue(\"secondaryGray.900\", \"white\");\r\n  const textColorSecondary = \"secondaryGray.600\";\r\n\r\n  return (\r\n    <Card cursor={'pointer'} py='15px' onClick={props.onClick} >\r\n      <Flex\r\n        my='auto'\r\n        h='100%'\r\n        align={{ base: \"center\", xl: \"start\" }}\r\n        justify={{ base: \"center\", xl: \"center\" }}>\r\n        {startContent}\r\n\r\n        <Stat my='auto' ms={startContent ? \"18px\" : \"0px\"}>\r\n          <StatLabel\r\n            lineHeight='100%'\r\n            color={textColorSecondary}\r\n            fontSize={{\r\n              base: \"sm\",\r\n            }}>\r\n            {name}\r\n          </StatLabel>\r\n          <StatNumber\r\n            color={textColor}\r\n            fontSize={{\r\n              base: \"2xl\",\r\n            }}>\r\n            <CountUpComponent targetNumber={value} />\r\n            {/* {value} */}\r\n          </StatNumber>\r\n          {growth ? (\r\n            <Flex align='center'>\r\n              <Text color='green.500' fontSize='xs' fontWeight='700' me='5px'>\r\n                {growth}\r\n              </Text>\r\n              <Text color='secondaryGray.600' fontSize='xs' fontWeight='400'>\r\n                since last month\r\n              </Text>\r\n            </Flex>\r\n          ) : null}\r\n        </Stat>\r\n        <Flex ms='auto' w='max-content'>\r\n          {endContent}\r\n        </Flex>\r\n      </Flex>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Flex } from \"@chakra-ui/react\";\r\n\r\nexport default function IconBox(props) {\r\n  const { icon, ...rest } = props;\r\n\r\n  return (\r\n    <Flex\r\n      alignItems={\"center\"}\r\n      justifyContent={\"center\"}\r\n      borderRadius={\"50%\"}\r\n      {...rest}>\r\n      {icon}\r\n    </Flex>\r\n  );\r\n}\r\n","import { Box, Grid, Radio, RadioGroup, Select, Stack } from '@chakra-ui/react';\r\nimport Card from \"components/card/Card\";\r\nimport moment from 'moment';\r\nimport { useEffect, useState } from 'react';\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { postApi } from \"services/api\";\r\n\r\n\r\nconst ReportChart = (props) => {\r\n    const { dashboard } = props;\r\n    const [Chartseries, setChartSeries] = useState([44, 55, 13, 33]);\r\n\r\n    const options = {\r\n        chart: {\r\n            width: 380,\r\n            type: \"donut\",\r\n        },\r\n        dataLabels: {\r\n            enabled: false,\r\n        },\r\n        responsive: [\r\n            {\r\n                breakpoint: 480,\r\n                options: {\r\n                    chart: {\r\n                        width: 200,\r\n                    },\r\n                    legend: {\r\n                        show: false,\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n        legend: {\r\n            position: \"bottom\",\r\n        },\r\n    };\r\n    return (\r\n        <Card>\r\n            <Grid py={5}>\r\n                <div >\r\n                    <ReactApexChart\r\n                        options={options}\r\n                        series={Chartseries}\r\n                        type=\"donut\"\r\n                        width={450}\r\n                    />\r\n                </div>\r\n            </Grid>\r\n        </Card >\r\n    )\r\n}\r\n\r\nexport default ReportChart\r\n","// Chakra imports\r\nimport {\r\n  Flex,\r\n  Heading,\r\n  Icon,\r\n  IconButton,\r\n  SimpleGrid,\r\n  useColorModeValue,\r\n  Grid,\r\n  GridItem,\r\n} from \"@chakra-ui/react\";\r\n// Assets\r\n// Custom components\r\nimport { ViewIcon } from \"@chakra-ui/icons\";\r\nimport Card from \"components/card/Card\";\r\nimport MiniStatistics from \"components/card/MiniStatistics\";\r\nimport IconBox from \"components/icons/IconBox\";\r\nimport { HSeparator } from \"components/separator/Separator\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { LuBuilding2 } from \"react-icons/lu\";\r\nimport { MdAddTask, MdContacts, MdLeaderboard } from \"react-icons/md\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { getApi } from \"services/api\";\r\nimport ReportChart from \"../reports/components/reportChart\";\r\nimport Chart from \"../reports/components/chart\";\r\n\r\nexport default function UserReports() {\r\n  // Chakra Color Mode\r\n  const brandColor = useColorModeValue(\"brand.500\", \"white\");\r\n  const boxBg = useColorModeValue(\"secondaryGray.300\", \"whiteAlpha.100\");\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n  const [task, setTask] = useState([]);\r\n  const [contactData, setContactData] = useState([]);\r\n  const [leadData, setLeadData] = useState([]);\r\n  const [propertyData, setPropertyData] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  const fetchData = async () => {\r\n    let taskData = await getApi(\r\n      user.role === \"admin\" ? \"api/task/\" : `api/task/?createBy=${user._id}`\r\n    );\r\n    let contact = await getApi(\r\n      user.role === \"admin\"\r\n        ? \"api/contact/\"\r\n        : `api/contact/?createBy=${user._id}`\r\n    );\r\n    let lead = await getApi(\r\n      user.role === \"admin\" ? \"api/lead/\" : `api/lead/?createBy=${user._id}`\r\n    );\r\n    let property = await getApi(\r\n      user.role === \"admin\"\r\n        ? \"api/property/\"\r\n        : `api/property/?createBy=${user._id}`\r\n    );\r\n\r\n    setPropertyData(property?.data);\r\n    setLeadData(lead?.data);\r\n    setContactData(contact?.data);\r\n    setTask(taskData?.data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} gap=\"20px\" mb=\"20px\">\r\n        {/* , \"2xl\": 6 */}\r\n        <MiniStatistics\r\n          onClick={() => navigate(\"/task\")}\r\n          startContent={\r\n            <IconBox\r\n              w=\"56px\"\r\n              h=\"56px\"\r\n              bg=\"linear-gradient(90deg, #df684c 0%, #a7381e 100%)\"\r\n              icon={<Icon w=\"28px\" h=\"28px\" as={MdAddTask} color=\"white\" />}\r\n            />\r\n          }\r\n          name=\"Tasks\"\r\n          value={task?.length || 0}\r\n        />\r\n        <MiniStatistics\r\n          onClick={() => navigate(\"/contacts\")}\r\n          startContent={\r\n            <IconBox\r\n              w=\"56px\"\r\n              h=\"56px\"\r\n              bg={boxBg}\r\n              icon={\r\n                <Icon w=\"32px\" h=\"32px\" as={MdContacts} color={brandColor} />\r\n              }\r\n            />\r\n          }\r\n          name=\"Contacts\"\r\n          value={contactData?.length || 0}\r\n        />\r\n        <MiniStatistics\r\n          onClick={() => navigate(\"/lead\")}\r\n          startContent={\r\n            <IconBox\r\n              w=\"56px\"\r\n              h=\"56px\"\r\n              bg={boxBg}\r\n              icon={\r\n                <Icon w=\"32px\" h=\"32px\" as={MdLeaderboard} color={brandColor} />\r\n              }\r\n            />\r\n          }\r\n          name=\"Leads\"\r\n          value={leadData?.length || 0}\r\n        />\r\n        <MiniStatistics\r\n          onClick={() => navigate(\"/properties\")}\r\n          startContent={\r\n            <IconBox\r\n              w=\"56px\"\r\n              h=\"56px\"\r\n              bg={boxBg}\r\n              icon={\r\n                <Icon w=\"32px\" h=\"32px\" as={LuBuilding2} color={brandColor} />\r\n              }\r\n            />\r\n          }\r\n          name=\"property\"\r\n          value={propertyData?.length || 0}\r\n        />\r\n      </SimpleGrid>\r\n\r\n      <Grid templateColumns=\"repeat(12, 1fr)\" gap={3}>\r\n        <GridItem rowSpan={2} colSpan={{ base: 12, md: 8 }}>\r\n          <Card>\r\n            <Flex mb={3} alignItems={\"center\"} justifyContent={\"space-between\"}>\r\n              <Heading size=\"md\">Report</Heading>\r\n              <IconButton\r\n                color={\"green.500\"}\r\n                onClick={() => navigate(\"/reporting-analytics\")}\r\n                aria-label=\"Call Fred\"\r\n                borderRadius=\"10px\"\r\n                size=\"md\"\r\n                icon={<ViewIcon />}\r\n              />\r\n            </Flex>\r\n            <HSeparator />\r\n            <ReportChart dashboard={\"dashboard\"} />\r\n          </Card>\r\n        </GridItem>\r\n        <GridItem rowSpan={2} colSpan={{ base: 12, md: 4 }}>\r\n          <Card>\r\n            <Flex mb={3} alignItems={\"center\"} justifyContent={\"space-between\"}>\r\n              <Heading size=\"md\">Report</Heading>\r\n              <IconButton\r\n                color={\"green.500\"}\r\n                onClick={() => navigate(\"/reporting-analytics\")}\r\n                aria-label=\"Call Fred\"\r\n                borderRadius=\"10px\"\r\n                size=\"md\"\r\n                icon={<ViewIcon />}\r\n              />\r\n            </Flex>\r\n            <HSeparator />\r\n            <Chart dashboard={\"dashboard\"} />\r\n          </Card>\r\n        </GridItem>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import { Box, Grid, Radio, RadioGroup, Select, Stack } from '@chakra-ui/react';\r\nimport Card from \"components/card/Card\";\r\nimport moment from 'moment';\r\nimport { useEffect, useState } from 'react';\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { postApi } from \"services/api\";\r\n\r\n\r\nconst ReportChart = (props) => {\r\n    const { dashboard } = props;\r\n    const [reportChart, setReportChart] = useState({})\r\n    const [startDate, setStartDate] = useState(new Date(new Date() - 14 * 24 * 60 * 60 * 1000));\r\n    const [endDate, setEndDate] = useState(new Date());\r\n    const [select, setSelect] = useState('all');\r\n    const [selection, setSelection] = useState('day');\r\n\r\n    const user = JSON.parse(localStorage.getItem(\"user\"))\r\n\r\n\r\n    const featchChart = async () => {\r\n        const data = {\r\n            startDate: moment(startDate).format('YYYY-MM-DD'),\r\n            endDate: moment(endDate).format('YYYY-MM-DD'),\r\n            filter: selection\r\n        }\r\n        let result = await postApi(user.role === 'admin' ? 'api/reporting/index' : `api/reporting/index?sender=${user._id}`, data);\r\n        if (result && result.status === 200) {\r\n            setReportChart(result?.data)\r\n        }\r\n    }\r\n\r\n    const options = {\r\n        chart: {\r\n            id: 'line-chart',\r\n        },\r\n        xaxis: {\r\n            type: 'datetime',\r\n        },\r\n        yaxis: {\r\n            title: {\r\n                text: 'Count',\r\n            },\r\n        },\r\n        dataLabels: {\r\n            enabled: true,\r\n        }\r\n    };\r\n\r\n\r\n    const series = Object.keys(reportChart).map((key) => {\r\n        const dataSet = reportChart[key][0];\r\n\r\n        let seriesData = [];\r\n\r\n        if (dataSet?.Emails) {\r\n            seriesData = seriesData.concat(\r\n                dataSet.Emails.map((item) => ({ x: item.date, y: item.Emailcount }))\r\n            );\r\n        }\r\n        if (dataSet?.Calls) {\r\n            seriesData = seriesData.concat(\r\n                dataSet.Calls.map((item) => ({ x: item.date, y: item.Callcount }))\r\n            );\r\n        }\r\n        if (dataSet?.TextMsges) {\r\n            seriesData = seriesData.concat(\r\n                dataSet.TextMsges.map((item) => ({ x: item.date, y: item.TextSentCount }))\r\n            );\r\n        }\r\n\r\n        return {\r\n            name: key,\r\n            data: seriesData,\r\n        };\r\n\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        featchChart()\r\n    }, [startDate, endDate, selection])\r\n\r\n\r\n    const selectedSeries = select === 'all' ? series : series.filter(series => series.name === select);\r\n    return (\r\n        <Card>\r\n            {!dashboard &&\r\n                <Box display='flex' alignItems='center' flexWrap={'wrap'} justifyContent='space-between' mb={4}>\r\n                    <Select value={select} onChange={(e) => setSelect(e.target.value)} width={{ base: '100%', md: '15%' }} mb={{ base: 3, md: 'auto' }}>\r\n                        <option value='EmailDetails'>Email</option>\r\n                        <option value='outboundcall'>Call</option>\r\n                        {/* <option value='TextSent'>TextSent</option> */}\r\n                        <option value='all'>all</option>\r\n                    </Select>\r\n                    <Box width={{ base: '100%', md: 'auto' }} flexWrap={'wrap'} justifyContent={'left'} mb={{ base: 3, md: 'auto' }} display='flex'>\r\n                        <ReactDatePicker selected={startDate} onChange={(date) => setStartDate(date)} />\r\n                        <ReactDatePicker selected={endDate} onChange={(date) => setEndDate(date)} />\r\n                    </Box>\r\n                    <Box width={{ base: '100%', md: 'auto' }} display={'flex'} justifyContent={'right'} mb={{ base: 3, md: 'auto' }}>\r\n                        <RadioGroup onChange={(e) => setSelection(e)} value={selection}>\r\n                            <Stack direction='row'>\r\n                                <Radio value='day' >Daily</Radio>\r\n                                <Radio value='week'>Weekly</Radio>\r\n                                {/* <Radio value='Monthly' onClick={() => updateData('Monthly')}>Monthly</Radio> */}\r\n                            </Stack>\r\n                        </RadioGroup>\r\n                    </Box>\r\n                </Box>\r\n            }\r\n            <div id=\"chart\">\r\n                <div id=\"chart-timeline\">\r\n                    {selectedSeries && (\r\n                        <ReactApexChart\r\n                            options={options}\r\n                            series={selectedSeries}\r\n                            // type='bar'\r\n                            // type='line'\r\n                            type='area'\r\n                            height={350}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ReportChart\r\n","import { jsxs, jsx } from 'react/jsx-runtime';\nimport { createIcon } from '@chakra-ui/react';\n\nconst ViewIcon = createIcon({\n  displayName: \"ViewIcon\",\n  path: /* @__PURE__ */ jsxs(\"g\", { fill: \"currentColor\", children: [\n    /* @__PURE__ */ jsx(\"path\", { d: \"M23.432,10.524C20.787,7.614,16.4,4.538,12,4.6,7.6,4.537,3.213,7.615.568,10.524a2.211,2.211,0,0,0,0,2.948C3.182,16.351,7.507,19.4,11.839,19.4h.308c4.347,0,8.671-3.049,11.288-5.929A2.21,2.21,0,0,0,23.432,10.524ZM7.4,12A4.6,4.6,0,1,1,12,16.6,4.6,4.6,0,0,1,7.4,12Z\" }),\n    /* @__PURE__ */ jsx(\"circle\", { cx: \"12\", cy: \"12\", r: \"2\" })\n  ] })\n});\n\nexport { ViewIcon };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { compact, mapResponsive } from '@chakra-ui/utils';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nfunction spanFn(span) {\n  return mapResponsive(\n    span,\n    (value) => value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`\n  );\n}\nconst GridItem = forwardRef(\n  function GridItem2(props, ref) {\n    const {\n      area,\n      colSpan,\n      colStart,\n      colEnd,\n      rowEnd,\n      rowSpan,\n      rowStart,\n      ...rest\n    } = props;\n    const styles = compact({\n      gridArea: area,\n      gridColumn: spanFn(colSpan),\n      gridRow: spanFn(rowSpan),\n      gridColumnStart: colStart,\n      gridColumnEnd: colEnd,\n      gridRowStart: rowStart,\n      gridRowEnd: rowEnd\n    });\n    return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n  }\n);\nGridItem.displayName = \"GridItem\";\n\nexport { GridItem };\n","'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst Grid = forwardRef(function Grid2(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props;\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns\n  };\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nGrid.displayName = \"Grid\";\n\nexport { Grid };\n","'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { cx } from '@chakra-ui/utils';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\n\nconst SelectField = forwardRef(\n  function SelectField2(props, ref) {\n    const { children, placeholder, className, ...rest } = props;\n    return /* @__PURE__ */ jsxs(\n      chakra.select,\n      {\n        ...rest,\n        ref,\n        className: cx(\"chakra-select\", className),\n        children: [\n          placeholder && /* @__PURE__ */ jsx(\"option\", { value: \"\", children: placeholder }),\n          children\n        ]\n      }\n    );\n  }\n);\nSelectField.displayName = \"SelectField\";\n\nexport { SelectField };\n","'use client';\nimport { jsxs, jsx } from 'react/jsx-runtime';\nimport { omitThemingProps, layoutPropNames } from '@chakra-ui/styled-system';\nimport { split, dataAttr } from '@chakra-ui/utils';\nimport { cloneElement, isValidElement } from 'react';\nimport { SelectField } from './select-field.mjs';\nimport { useFormControl } from '../form-control/use-form-control.mjs';\nimport { forwardRef } from '../system/forward-ref.mjs';\nimport { chakra } from '../system/factory.mjs';\nimport { useMultiStyleConfig } from '../system/use-style-config.mjs';\n\nconst Select = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Select\", props);\n  const {\n    rootProps,\n    placeholder,\n    icon,\n    color,\n    height,\n    h,\n    minH,\n    minHeight,\n    iconColor,\n    iconSize,\n    ...rest\n  } = omitThemingProps(props);\n  const [layoutProps, otherProps] = split(rest, layoutPropNames);\n  const ownProps = useFormControl(otherProps);\n  const rootStyles = {\n    width: \"100%\",\n    height: \"fit-content\",\n    position: \"relative\",\n    color\n  };\n  const fieldStyles = {\n    paddingEnd: \"2rem\",\n    ...styles.field,\n    _focus: {\n      zIndex: \"unset\",\n      ...styles.field?.[\"_focus\"]\n    }\n  };\n  return /* @__PURE__ */ jsxs(\n    chakra.div,\n    {\n      className: \"chakra-select__wrapper\",\n      __css: rootStyles,\n      ...layoutProps,\n      ...rootProps,\n      children: [\n        /* @__PURE__ */ jsx(\n          SelectField,\n          {\n            ref,\n            height: h ?? height,\n            minH: minH ?? minHeight,\n            placeholder,\n            ...ownProps,\n            __css: fieldStyles,\n            children: props.children\n          }\n        ),\n        /* @__PURE__ */ jsx(\n          SelectIcon,\n          {\n            \"data-disabled\": dataAttr(ownProps.disabled),\n            ...(iconColor || color) && { color: iconColor || color },\n            __css: styles.icon,\n            ...iconSize && { fontSize: iconSize },\n            children: icon\n          }\n        )\n      ]\n    }\n  );\n});\nSelect.displayName = \"Select\";\nconst DefaultIcon = (props) => /* @__PURE__ */ jsx(\"svg\", { viewBox: \"0 0 24 24\", ...props, children: /* @__PURE__ */ jsx(\n  \"path\",\n  {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  }\n) });\nconst IconWrapper = chakra(\"div\", {\n  baseStyle: {\n    position: \"absolute\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    pointerEvents: \"none\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\"\n  }\n});\nconst SelectIcon = (props) => {\n  const { children = /* @__PURE__ */ jsx(DefaultIcon, {}), ...rest } = props;\n  const clone = cloneElement(children, {\n    role: \"presentation\",\n    className: \"chakra-select__icon\",\n    focusable: false,\n    \"aria-hidden\": true,\n    // force icon to adhere to `IconWrapper` styles\n    style: {\n      width: \"1em\",\n      height: \"1em\",\n      color: \"currentColor\"\n    }\n  });\n  return /* @__PURE__ */ jsx(IconWrapper, { ...rest, className: \"chakra-select__icon-wrapper\", children: isValidElement(children) ? clone : null });\n};\nSelectIcon.displayName = \"SelectIcon\";\n\nexport { DefaultIcon, Select };\n","function split(object, keys) {\n  const picked = {};\n  const omitted = {};\n  for (const [key, value] of Object.entries(object)) {\n    if (keys.includes(key))\n      picked[key] = value;\n    else\n      omitted[key] = value;\n  }\n  return [picked, omitted];\n}\n\nexport { split };\n"],"names":["props","variant","children","rest","styles","useStyleConfig","_jsx","Box","__css","height","_ref","targetNumber","count","setCount","useState","useEffect","interval","setInterval","prevCount","clearInterval","SimpleGrid","forwardRef","ref","columns","spacingX","spacingY","spacing","minChildWidth","theme","useTheme","templateColumns","width","mapResponsive","value","_value","getToken","n","widthToColumns","jsx","Grid","gap","columnGap","rowGap","displayName","StatStylesProvider","useStatStyles","createContext","name","errorMessage","Stat","useMultiStyleConfig","statStyles","position","flex","container","className","omitThemingProps","chakra","div","cx","StatLabel","dt","label","StatNumber","dd","number","fontFeatureSettings","fontVariantNumeric","Default","startContent","endContent","growth","textColor","useColorModeValue","Card","cursor","py","onClick","_jsxs","Flex","my","h","align","base","xl","justify","ms","lineHeight","color","fontSize","CountUpComponent","Text","fontWeight","me","w","IconBox","icon","alignItems","justifyContent","borderRadius","dashboard","Chartseries","setChartSeries","ReactApexChart","options","chart","type","dataLabels","enabled","responsive","breakpoint","legend","show","series","UserReports","brandColor","boxBg","user","JSON","parse","localStorage","getItem","task","setTask","contactData","setContactData","leadData","setLeadData","propertyData","setPropertyData","navigate","useNavigate","async","taskData","getApi","role","_id","contact","lead","property","data","fetchData","_Fragment","md","lg","mb","MiniStatistics","bg","Icon","as","MdAddTask","length","MdContacts","MdLeaderboard","LuBuilding2","GridItem","rowSpan","colSpan","Heading","size","IconButton","ViewIcon","HSeparator","ReportChart","Chart","reportChart","setReportChart","startDate","setStartDate","Date","endDate","setEndDate","select","setSelect","selection","setSelection","Object","keys","map","key","dataSet","seriesData","Emails","concat","item","x","date","y","Emailcount","Calls","Callcount","TextMsges","TextSentCount","moment","format","filter","result","postApi","status","featchChart","selectedSeries","display","flexWrap","Select","onChange","e","target","ReactDatePicker","selected","RadioGroup","Stack","direction","Radio","id","xaxis","yaxis","title","text","createIcon","path","jsxs","fill","d","cy","r","spanFn","span","area","colStart","colEnd","rowEnd","rowStart","compact","gridArea","gridColumn","gridRow","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","templateAreas","column","row","autoFlow","autoRows","templateRows","autoColumns","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","SelectField","placeholder","rootProps","minH","minHeight","iconColor","iconSize","layoutProps","otherProps","split","layoutPropNames","ownProps","useFormControl","rootStyles","fieldStyles","paddingEnd","field","_focus","zIndex","SelectIcon","dataAttr","disabled","DefaultIcon","viewBox","IconWrapper","baseStyle","pointerEvents","top","transform","clone","cloneElement","focusable","style","isValidElement","object","picked","omitted","entries","includes"],"sourceRoot":""}